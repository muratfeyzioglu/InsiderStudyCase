{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "cls = <class '_pytest.runner.CallInfo'>, func = <function call_runtest_hook.<locals>.<lambda> at 0x0000022FDCFE0C20>, when = 'setup'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: Callable[[], TResult],\n        when: Literal[\"collect\", \"setup\", \"call\", \"teardown\"],\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\nvenv\\Lib\\site-packages\\_pytest\\runner.py:345: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\_pytest\\runner.py:266: in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nvenv\\Lib\\site-packages\\pluggy\\_hooks.py:501: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\nvenv\\Lib\\site-packages\\pluggy\\_manager.py:119: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nvenv\\Lib\\site-packages\\_pytest\\unraisableexception.py:85: in pytest_runtest_setup\n    yield from unraisable_exception_runtest_hook()\nvenv\\Lib\\site-packages\\_pytest\\unraisableexception.py:65: in unraisable_exception_runtest_hook\n    yield\nvenv\\Lib\\site-packages\\_pytest\\logging.py:833: in pytest_runtest_setup\n    yield from self._runtest_for(item, \"setup\")\nvenv\\Lib\\site-packages\\_pytest\\logging.py:822: in _runtest_for\n    yield\nvenv\\Lib\\site-packages\\_pytest\\capture.py:877: in pytest_runtest_setup\n    return (yield)\nvenv\\Lib\\site-packages\\_pytest\\threadexception.py:82: in pytest_runtest_setup\n    yield from thread_exception_runtest_hook()\nvenv\\Lib\\site-packages\\_pytest\\threadexception.py:63: in thread_exception_runtest_hook\n    yield\nvenv\\Lib\\site-packages\\_pytest\\runner.py:161: in pytest_runtest_setup\n    item.session._setupstate.setup(item)\nvenv\\Lib\\site-packages\\_pytest\\runner.py:517: in setup\n    raise exc\nvenv\\Lib\\site-packages\\_pytest\\runner.py:514: in setup\n    col.setup()\nvenv\\Lib\\site-packages\\_pytest\\python.py:1839: in setup\n    self._request._fillfixtures()\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:693: in _fillfixtures\n    item.funcargs[argname] = self.getfixturevalue(argname)\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:547: in getfixturevalue\n    fixturedef = self._get_active_fixturedef(argname)\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:566: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:652: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:1095: in execute\n    result = ihook.pytest_fixture_setup(fixturedef=self, request=request)\nvenv\\Lib\\site-packages\\pluggy\\_hooks.py:501: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\nvenv\\Lib\\site-packages\\pluggy\\_manager.py:119: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nvenv\\Lib\\site-packages\\_pytest\\setuponly.py:36: in pytest_fixture_setup\n    return (yield)\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:1149: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfixturefunc = <function setup at 0x0000022FDCC24860>, request = <SubRequest 'setup' for <Function test_deneme>>, kwargs = {'browser': None}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n>               raise ValueError(f\"{request.fixturename} did not yield a value\") from None\nE               ValueError: setup did not yield a value\n\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:918: ValueError\n", "test_name": "test_deneme", "rerun": "0"}}, "suite_name": "Tests/test_demo.py"}}}, "date": "February 15, 2024", "start_time": 1707994497.1006117, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}